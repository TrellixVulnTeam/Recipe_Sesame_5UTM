[{"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/index.js":"1","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/reportWebVitals.js":"2","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/App.js":"3","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/Chatbox/Chatbox.js":"4","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/CartButton/CartButton.js":"5","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/RecommendedContainer/RecommendedContainer.js":"6","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/Logo/Logo.js":"7","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/CartContainer/CartContainer.js":"8","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeContainer/RecipeContainer.js":"9","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/ChatTextEntry/ChatTextEntry.js":"10","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/MessageContainer/MessageContainer.js":"11","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/CartContents/CartContents.js":"12","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/RecommendedRecipe/RecommendedRecipe.js":"13","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/CartHeader/CartHeader.js":"14","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeDescription/RecipeDescription.js":"15","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeHeader/RecipeHeader.js":"16","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeControls/RecipeControls.js":"17","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/Message/Message.js":"18","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/CartItem/CartItem.js":"19","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/ListSelector/ListSelector.js":"20","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeCartContainer/RecipeCartContainer.js":"21","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeButton/RecipeButton.js":"22","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeCartContents/RecipeCartContents.js":"23","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeButtons/RecipeButtons.js":"24","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/AddIngredientsButton/AddIngredientsButton.js":"25","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/QuantityAdjuster/QuantityAdjuster.js":"26"},{"size":554,"mtime":1646791731203,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1646791731204,"results":"29","hashOfConfig":"28"},{"size":3579,"mtime":1648407447705,"results":"30","hashOfConfig":"28"},{"size":1542,"mtime":1647573126495,"results":"31","hashOfConfig":"28"},{"size":500,"mtime":1647136425948,"results":"32","hashOfConfig":"28"},{"size":1257,"mtime":1648173657261,"results":"33","hashOfConfig":"28"},{"size":195,"mtime":1646791731197,"results":"34","hashOfConfig":"28"},{"size":1843,"mtime":1647127328740,"results":"35","hashOfConfig":"28"},{"size":1900,"mtime":1648343332244,"results":"36","hashOfConfig":"28"},{"size":6780,"mtime":1648516772671,"results":"37","hashOfConfig":"28"},{"size":709,"mtime":1647662837490,"results":"38","hashOfConfig":"28"},{"size":3860,"mtime":1648519573485,"results":"39","hashOfConfig":"28"},{"size":630,"mtime":1647065820296,"results":"40","hashOfConfig":"28"},{"size":526,"mtime":1647118555326,"results":"41","hashOfConfig":"28"},{"size":469,"mtime":1648342934074,"results":"42","hashOfConfig":"28"},{"size":451,"mtime":1647119611018,"results":"43","hashOfConfig":"28"},{"size":1450,"mtime":1648342988325,"results":"44","hashOfConfig":"28"},{"size":354,"mtime":1647300366119,"results":"45","hashOfConfig":"28"},{"size":6299,"mtime":1648442504821,"results":"46","hashOfConfig":"28"},{"size":797,"mtime":1647127496696,"results":"47","hashOfConfig":"28"},{"size":366,"mtime":1647140154003,"results":"48","hashOfConfig":"28"},{"size":2511,"mtime":1647143223467,"results":"49","hashOfConfig":"28"},{"size":484,"mtime":1646791731200,"results":"50","hashOfConfig":"28"},{"size":2106,"mtime":1648343011825,"results":"51","hashOfConfig":"28"},{"size":9744,"mtime":1648533736606,"results":"52","hashOfConfig":"28"},{"size":4400,"mtime":1648519707735,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"asluhd",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/index.js",[],["114","115"],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/reportWebVitals.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/App.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/Chatbox/Chatbox.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/CartButton/CartButton.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/RecommendedContainer/RecommendedContainer.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/Logo/Logo.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/CartContainer/CartContainer.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeContainer/RecipeContainer.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/ChatTextEntry/ChatTextEntry.js",["116","117"],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/MessageContainer/MessageContainer.js",["118"],"import React, { useState } from 'react';\nimport Message from '../Message/Message';\nimport './MessageContainer.css';\n\nconst MessageContainer = (props) => {\n    return (\n        <div className=\"messageContainer\">\n            { props.messages.slice(0).reverse().map((message, index) => (\n                (message.isUserMessage) ? (\n                    <Message key={index} content={message.content} isUserMessage={message.isUserMessage} />\n                ) : (\n                    <Message key={index} content={message.content.charAt(0).toUpperCase() + message.content.slice(1)} isUserMessage={message.isUserMessage} />\n                )\n            ))}\n        </div>\n    );\n}\n\nexport default MessageContainer;","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/CartContents/CartContents.js",["119","120","121"],"import React, { useEffect, useState } from \"react\";\r\nimport CartItem from \"../CartItem/CartItem\";\r\nimport ListSelector from \"../ListSelector/ListSelector\";\r\nimport './CartContents.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPrint } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst CartContents = (props) => {\r\n    const [ingredients, setIngredients] = useState(props.savedIngredients);\r\n    const [recipes, setRecipes] = useState(props.savedRecipes);\r\n    const [searchText, setSearchText] = useState('');\r\n\r\n    const handleSearchChange = (event) => {\r\n        setSearchText(event.target.value);\r\n        filterResults(event.target.value);\r\n    }\r\n\r\n    const filterResults = (filter) => {\r\n        if (filter.length > 0) {\r\n            const ogIngredients = props.savedIngredients;\r\n            const ogRecipes = props.savedRecipes;\r\n\r\n            if (props.displayIngredients) {\r\n                setIngredients(ogIngredients.filter(ingredient => ingredient.toLowerCase().search(filter.toLowerCase()) > -1));\r\n            } else {\r\n                setRecipes(ogRecipes.filter(recipe => recipe.Title.toLowerCase().search(filter.toLowerCase()) > -1));\r\n            }\r\n        } else {\r\n            setIngredients(props.savedIngredients);\r\n            setRecipes(props.savedRecipes);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setIngredients(props.savedIngredients);\r\n        setRecipes(props.savedRecipes);\r\n        filterResults(searchText);\r\n    }, [props.savedIngredients, props.savedRecipes])\r\n\r\n    return (\r\n        <div className=\"cartContents\">\r\n            <ListSelector \r\n                displayIngredients={props.displayIngredients}\r\n                setDisplayIngredients={props.setDisplayIngredients}\r\n            />\r\n\r\n            <div className=\"search\">\r\n                <input className=\"input\" type=\"text\" placeholder=\"Search...\" onChange={handleSearchChange} value={searchText}></input>\r\n            </div>\r\n            \r\n            {props.displayIngredients ? (\r\n                props.savedIngredients && props.savedIngredients.length > 0 ? (\r\n                    <div className=\"cartList\">\r\n                        {ingredients.map((item, index) => (\r\n                            <CartItem \r\n                                key={index} \r\n                                item={item} \r\n                                savedIngredients={props.savedIngredients}\r\n                                setSavedIngredients={props.setSavedIngredients}\r\n                                itemType=\"ingredient\"\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"cartList empty\">\r\n                        <p>You don't have any ingredients in your basket.</p>\r\n                    </div>\r\n                )\r\n            ) : (\r\n                props.savedRecipes && props.savedRecipes.length > 0 ? (\r\n                    <div className=\"cartList allRadius\">\r\n                        {recipes.map((item, index) => (\r\n                            <CartItem key={index} \r\n                                item={item} \r\n                                setOpenRecipe={props.setOpenRecipe} \r\n                                setRecipeScreenIsOpen={props.setRecipeScreenIsOpen}\r\n                                savedRecipes={props.savedRecipes}\r\n                                setSavedRecipes={props.setSavedRecipes}\r\n                                itemType=\"recipe\"\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"cartList empty\">\r\n                        <p>You haven't saved any recipes.</p>\r\n                    </div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CartContents;","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/RecommendedRecipe/RecommendedRecipe.js",["122"],"import React from 'react';\nimport './RecommendedRecipe.css';\n\nconst RecommendedRecipe = (props) => {\n    const handleRecipeClick = () => {\n        props.setOpenRecipe(props.recipe);\n        console.log(props.recipe.Cleaned_Ingredients.replace(/\"/g, ' inch').replace(/'/g, '\"'));\n        props.setRecipeScreenIsOpen(true);\n    }\n\n    return (\n        <div style={{ backgroundImage: \"url(\" + process.env.PUBLIC_URL + \"/images/\"  + props.recipe.Image_Name + \".jpg\" + \")\"}} className=\"recommendedRecipe\" onClick={handleRecipeClick}>\n            <h3>{props.recipe.Title}</h3>\n        </div>\n    );\n\n}\n\nexport default RecommendedRecipe;","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/CartHeader/CartHeader.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeDescription/RecipeDescription.js",["123"],"import React, { useState } from \"react\";\nimport './RecipeDescription.css';\n\nconst RecipeDescription = (props) => {\n    return (\n        <div className=\"recipeDescription\">\n            { props.ingredients.map(line => <p>{line}</p>) }\n            <div className=\"instructions\">\n                { props.recipe.Instructions.split('\\n').map(line => <p className=\"recipeInstructions\">{line}</p>) }\n            </div>\n        </div>\n    );\n}\n\nexport default RecipeDescription;","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeHeader/RecipeHeader.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeControls/RecipeControls.js",["124"],"import React, { useState } from \"react\";\nimport RecipeButtons from \"../RecipeButtons/RecipeButtons\";\nimport RecipeCartContainer from \"../RecipeCartContainer/RecipeCartContainer\";\nimport './RecipeControls.css';\n\nconst RecipeControls = (props) => {\n    return (\n        <div className=\"recipeControls\">\n            <img src={process.env.PUBLIC_URL + \"/images/\"  + props.recipe.Image_Name + \".jpg\"} alt={props.recipe.Title} />\n            { JSON.parse(props.recipe.Cleaned_Ingredients.replace(/\"/g, ' inch').replace(/'/g, '\"')).map(line => <p className=\"mobileIngredient\">{line}</p>) }\n            <div className=\"mobileInstructions\">\n                { props.recipe.Instructions.split('\\n').map(line => <p className=\"recipeInstructions\">{line}</p>) }\n            </div>\n            <h2>Your Ingredients</h2>\n            <RecipeCartContainer savedIngredients={props.savedIngredients}/>\n            <RecipeButtons \n                setRecipeSaved={props.setRecipeSaved}\n                recipe={props.recipe}\n                ingredients={props.ingredients}\n                setIngredients={props.setIngredients}\n                recipeSaved={props.recipeSaved}\n                savedRecipes={props.savedRecipes}\n                setSavedRecipes={props.setSavedRecipes}\n                savedIngredients={props.savedIngredients}\n                setSavedIngredients={props.setSavedIngredients}\n            />\n        </div>\n    );\n}\n\nexport default RecipeControls;","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/HomeScreen/Message/Message.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/CartItem/CartItem.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/ListSelector/ListSelector.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeCartContainer/RecipeCartContainer.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeButton/RecipeButton.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeCartContents/RecipeCartContents.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/RecipeButtons/RecipeButtons.js",[],"/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/RecipeScreen/AddIngredientsButton/AddIngredientsButton.js",["125"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { toDecimal, toVulgar } from 'vulgar-fractions';\nimport './AddIngredientsButton.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCartPlus } from '@fortawesome/free-solid-svg-icons';\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\n\nconst AddIngredientsButton = (props) => {\n    const [servings, setServings] = useState(1);\n    const quantitiesInit = useRef(false);\n    const quantities = useRef([]);\n    let endingIndexOfValue = -1;\n    let startingIndexOfValue = -1;\n\n    const setEndingIndexOfValue = (newVal) => endingIndexOfValue = newVal;\n    const setStartingIndexOfValue = (newVal) => startingIndexOfValue = newVal;\n\n    const floatRegExp = new RegExp('^([0-9]+([.][0-9]*)?|[.][0-9]+)$');\n\n    useEffect(() => {\n        let currentIngredients = props.ingredients.slice();\n        // Note: Can't use for...in here\n        for (let i = 0; i < props.ingredients.length; i++) {\n            const currentIngredient = props.ingredients[i];\n            const quantity = getQuantityFromIngredient(currentIngredient);\n            console.log(quantitiesInit.current);\n            if (!quantitiesInit.current) {\n                //setQuantities(new Map(quantities.set(currentIngredient, quantity)));\n                let currQuant = quantities.current.slice();\n                currQuant.splice(i, 0, quantity);\n                quantities.current = currQuant;\n            }\n\n            const newQuantity = servings * quantities.current[i];\n            \n            setNewQuantity(currentIngredient, newQuantity, i, currentIngredients);\n        }\n        quantitiesInit.current = true;\n        props.setIngredients(currentIngredients);\n    }, [servings]);\n\n    const setNewQuantity = (ingredient, newQuantity, index, currentIngredients) => {\n        if (endingIndexOfValue !== -1) {\n            let result = \"\";\n            \n            if (newQuantity < 1 && typeof toVulgar(newQuantity % 1) === 'undefined') result += 0;\n            else if (newQuantity >= 1) result += Math.floor(newQuantity);\n            \n            if (typeof toVulgar(newQuantity % 1) !== 'undefined' && result.length === 0) result += toVulgar(newQuantity % 1);\n            else if (typeof toVulgar(newQuantity % 1) !== 'undefined') result += \" \" + toVulgar(newQuantity % 1);\n            else result = parseInt(result) + (newQuantity % 1);\n\n            const newIng = ingredient.substring(0, startingIndexOfValue) + result + ingredient.substring(endingIndexOfValue);\n\n            if (newQuantity % 1 > 0 && ingredient.substring(startingIndexOfValue, endingIndexOfValue - 1).includes(\"/\")) {\n                // TODO - handle denominators > 9\n                setEndingIndexOfValue(startingIndexOfValue + result.toString().length + 2);\n            }\n            else setEndingIndexOfValue(startingIndexOfValue + result.toString().length);\n\n            currentIngredients.splice(index, 1, newIng);\n        }\n    }\n\n    const getQuantityFromIngredient = (ingredient) => {\n        let value = 0;\n        let index = 0;\n\n        // Need to reset indices to -1 for each ingredient\n        endingIndexOfValue = -1;\n        startingIndexOfValue = -1;\n\n        // IMPORTANT: Contents below are temp. copied from CartItem.js, but should be pulled into own file\n\n        // Find the first-occurring numeric value\n        while (index < ingredient.length && typeof toDecimal(ingredient.charAt(index)) === 'undefined' && (ingredient.charAt(index) < '0' || ingredient.charAt(index) > '9')) {\n            index++;\n        }\n\n        // If index is too big, no numbers in ingredient so we return 1\n        // TODO - disable quantity adjustor in this case\n        if (index >= ingredient.length) {\n            return 1;\n        }\n\n        setStartingIndexOfValue(index);\n\n        // Handle unicode fractions < 1\n        if (toDecimal(ingredient.charAt(index)) && toDecimal(ingredient.charAt(index)) > 0) {\n            if (endingIndexOfValue === -1) setEndingIndexOfValue(index + 1);\n            return toDecimal(ingredient.charAt(index));\n        }\n\n        // Handle integers\n        while (index < ingredient.length && (ingredient.charAt(index) >= '0' && ingredient.charAt(index) <= '9')) {\n            value = parseInt(value) * 10;\n            value = parseInt(value) + parseInt(ingredient.charAt(index));\n            index++;\n        }\n\n        // TODO - handle case where next character is unicode fraction as well (no space)\n\n        if (ingredient.charAt(index) === '/') {\n            // Handle non-unicode fractions < 1\n            // value is now numerator\n            let denominator = 0;\n            index++;\n            while (index < ingredient.length && (ingredient.charAt(index) >= '0' && ingredient.charAt(index) <= '9')) {\n                denominator = parseInt(denominator) * 10;\n                denominator = parseInt(denominator) + parseInt(ingredient.charAt(index));\n                index++;\n            }\n            value = value / denominator;\n        } else if (ingredient.charAt(index) === ' ') {\n            // Handle unicode fractions > 1\n            if (toDecimal(ingredient.charAt(index + 1)) && toDecimal(ingredient.charAt(index + 1)) > 0) {\n                index++;\n                value = value + toDecimal(ingredient.charAt(index));\n                index++;\n            } else {\n                // Handle non-unicode fractions > 1\n                let numerator = 0;\n                index++;\n\n                while (index < ingredient.length && (ingredient.charAt(index) >= '0' && ingredient.charAt(index) <= '9')) {\n                    numerator = parseInt(numerator) * 10;\n                    numerator = parseInt(numerator) + parseInt(ingredient.charAt(index));\n                    index++;\n                }\n\n                if (ingredient.charAt(index) === '/') {\n                    let denominator = 0;\n                    index++;\n                    while (index < ingredient.length && (ingredient.charAt(index) >= '0' && ingredient.charAt(index) <= '9')) {\n                        denominator = parseInt(denominator) * 10;\n                        denominator = parseInt(denominator) + parseInt(ingredient.charAt(index));\n                        index++;\n                    }\n                    value = value + numerator / denominator;\n                } else index--;\n            }\n        } else if (ingredient.charAt(index) === '.') {\n            // Handle decimals\n            index++;\n            let decimal = 0;\n\n            while (index < ingredient.length && (ingredient.charAt(index) >= '0' && ingredient.charAt(index) <= '9')) {\n                decimal = parseInt(decimal) * 10;\n                decimal = parseInt(decimal) + parseInt(ingredient.charAt(index));\n                index++;\n            }\n\n            const divisor = Math.pow(10, decimal.toString().length);\n            value = value + decimal / divisor;\n        }\n        \n        setEndingIndexOfValue(index);\n        return value;\n    }\n\n    const handleServingsChange = (event) => {\n        setServings(event.target.value);\n    }\n\n    const onServingsBlur = (event) => {\n        if(!event.target.value.match(floatRegExp)) setServings(0);\n    }\n\n    const roundToQuarter = (num) => {\n        return (Math.round(num * 4) / 4);\n    }\n\n    const incrementServings = () => {\n        const currentServings = Number(servings);\n        let newServings = 0.0;\n\n        if (currentServings >= 5.0) {\n            newServings = currentServings + 1.0;\n        } else if (currentServings >= 1.0) {\n            newServings = currentServings + 0.5;\n        } else {\n            newServings = currentServings + 0.25;\n        }\n\n        setServings(roundToQuarter(newServings));\n    }\n\n    const decrementServings = () => {\n        const currentServings = Number(servings);\n        let newServings = 0.0;\n\n        if (currentServings > 5.0) {\n            newServings = currentServings - 1.0;\n        } else if (currentServings > 1.0) {\n            newServings = currentServings - 0.5;\n        } else {\n            newServings = currentServings - 0.25;\n        }\n\n        if (newServings < 0.0) setServings(0); // Catch any negatives\n        else setServings(roundToQuarter(newServings));\n    }\n\n    const saveRecipe = () => {\n        let currentRecipes = props.savedRecipes.slice();\n        currentRecipes.push(props.recipe);\n        localStorage.setItem('savedRecipes', JSON.stringify(currentRecipes));\n        props.setSavedRecipes(currentRecipes);\n    }\n\n    const handleButtonClick = () => {\n        let currentIngredients = props.savedIngredients.slice();\n        const newIngredientList = [...currentIngredients, ...props.ingredients];\n        props.setSavedIngredients(newIngredientList);\n        localStorage.setItem('savedIngredients', JSON.stringify(newIngredientList));\n        if (!props.recipeSaved) saveRecipe();\n        props.setRecipeSaved(true);\n    }\n\n    return(\n        <div className=\"addIngredientsButtonContainer\">\n            <div className=\"servingsArrows\">\n                <FontAwesomeIcon icon={faAngleDown} onClick={decrementServings} size=\"lg\"/>\n                <div className=\"servings\">\n                    <input className=\"input\" maxLength=\"5\"  type=\"text\" onChange={handleServingsChange} onBlur={onServingsBlur} value={servings}></input>\n                </div>\n                <FontAwesomeIcon icon={faAngleUp} onClick={incrementServings} size=\"lg\"/>\n            </div>\n            <div className=\"cartIcon\">\n                <FontAwesomeIcon icon={faCartPlus} onClick={handleButtonClick} size=\"1x\"/>\n            </div>\n        </div>\n    );\n}\n\nexport default AddIngredientsButton;","/Users/jessefowler/Documents/RecipeSesame/Recipe_Sesame/RecipeSesameFrontEnd/src/components/CartScreen/QuantityAdjuster/QuantityAdjuster.js",["126"],"import React, { useEffect, useState } from \"react\";\nimport { toVulgar } from 'vulgar-fractions';\nimport './QuantityAdjuster.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nconst QuantityAdjuster = (props) => {\n    const [quantity, setQuantity] = useState(props.initialQuantity);\n    const [startIndex] = useState(props.startingIndex);\n    const [endIndex, setEndIndex] = useState(props.endingIndex);\n    const [valueChanged, setValueChanged] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n    const floatRegExp = new RegExp('^([0-9]+([.][0-9]*)?|[.][0-9]+)$');\n\n    useEffect(() => {\n        if (props.endingIndex !== -1) {\n            let currentIngredients = props.savedIngredients.slice();\n            let currentIng = props.ingredient;\n            let index = currentIngredients.indexOf(currentIng);\n            let result = \"\";\n            \n            if (quantity < 1 && typeof toVulgar(quantity % 1) === 'undefined') result += 0;\n            else if (quantity >= 1) result += Math.floor(quantity);\n\n            if (index === currentIngredients.length - 1) {\n                console.log('quantity ' + quantity);\n                console.log(\"result \" + result);\n            }\n            \n            if (typeof toVulgar(quantity % 1) !== 'undefined' && result.length === 0) result += toVulgar(quantity % 1);\n            else if (typeof toVulgar(quantity % 1) !== 'undefined') result += \" \" + toVulgar(quantity % 1);\n            else result = parseInt(result) + (quantity % 1);\n\n            const newIng = currentIng.substring(0, startIndex) + result + currentIng.substring(endIndex);\n\n            if (!valueChanged && quantity % 1 > 0 && currentIng.substring(startIndex, endIndex - 1).includes(\"/\")) {\n                // TODO - handle denominators > 9\n                setEndIndex(startIndex + result.toString().length + 2);\n                setValueChanged(true);\n            }\n            else setEndIndex(startIndex + result.toString().length);\n\n            currentIngredients.splice(index, 1, newIng);\n            if (loaded) localStorage.setItem('savedIngredients', JSON.stringify(currentIngredients));\n            props.setSavedIngredients(currentIngredients);\n        }\n        setLoaded(true);\n    }, [quantity]);\n\n    const handleQuantityChange = (event) => {\n        setQuantity(event.target.value);\n    }\n\n    const onQuantityBlur = (event) => {\n        if(!event.target.value.match(floatRegExp)) setQuantity(0);\n    }\n\n    const roundToQuarter = (num) => {\n        return (Math.round(num * 4) / 4);\n    }\n\n    const incrementQuantity = () => {\n        const currentQuantity = Number(quantity);\n        let newQuantity = 0.0;\n\n        if (currentQuantity >= 5.0) {\n            newQuantity = currentQuantity + 1.0;\n        } else if (currentQuantity >= 1.0) {\n            newQuantity = currentQuantity + 0.5;\n        } else {\n            newQuantity = currentQuantity + 0.25;\n        }\n\n        setQuantity(roundToQuarter(newQuantity));\n    }\n\n    const decrementQuantity = () => {\n        const currentQuantity = Number(quantity);\n        let newQuantity = 0.0;\n        if (currentQuantity > 5.0) {\n            newQuantity = currentQuantity - 1.0;\n        } else if (currentQuantity > 1.0) {\n            newQuantity = currentQuantity - 0.5;\n        } else {\n            newQuantity = currentQuantity - 0.25;\n        }\n        if (newQuantity < 0.0) setQuantity(0); // Catch any negatives\n        else setQuantity(roundToQuarter(newQuantity));\n    }\n\n    return (\n        <div className=\"quantityAdjuster\">\n            <FontAwesomeIcon icon={faTrash} className=\"delete\" onClick={props.removeIngredient}/>\n            <div className=\"servingsArrows quantityArrows\">\n                <FontAwesomeIcon icon={faAngleDown} onClick={decrementQuantity} size=\"lg\"/>\n                <div className=\"servings quantity\">\n                    <input className=\"input\" maxLength=\"5\" type=\"text\" onChange={handleQuantityChange} onBlur={onQuantityBlur} value={quantity}></input>\n                </div>\n                <FontAwesomeIcon icon={faAngleUp} onClick={incrementQuantity} size=\"lg\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default QuantityAdjuster;",{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":6,"column":12,"nodeType":"133","messageId":"134","endLine":6,"endColumn":20},{"ruleId":"131","severity":1,"message":"135","line":7,"column":12,"nodeType":"133","messageId":"134","endLine":7,"endColumn":23},{"ruleId":"131","severity":1,"message":"136","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"137","line":5,"column":10,"nodeType":"133","messageId":"134","endLine":5,"endColumn":25},{"ruleId":"131","severity":1,"message":"138","line":6,"column":10,"nodeType":"133","messageId":"134","endLine":6,"endColumn":17},{"ruleId":"139","severity":1,"message":"140","line":38,"column":8,"nodeType":"141","endLine":38,"endColumn":52,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":12,"column":121,"nodeType":"145","messageId":"146","endLine":12,"endColumn":122},{"ruleId":"131","severity":1,"message":"136","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"136","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"139","severity":1,"message":"147","line":41,"column":8,"nodeType":"141","endLine":41,"endColumn":18,"suggestions":"148"},{"ruleId":"139","severity":1,"message":"149","line":50,"column":8,"nodeType":"141","endLine":50,"endColumn":18,"suggestions":"150"},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"no-unused-vars","'keywords' is assigned a value but never used.","Identifier","unusedVar","'negKeywords' is assigned a value but never used.","'useState' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faPrint' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterResults' and 'searchText'. Either include them or remove the dependency array.","ArrayExpression",["153"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has missing dependencies: 'getQuantityFromIngredient', 'props', and 'setNewQuantity'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["154"],"React Hook useEffect has missing dependencies: 'endIndex', 'loaded', 'props', 'startIndex', and 'valueChanged'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["155"],"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [filterResults, props.savedIngredients, props.savedRecipes, searchText]",{"range":"162","text":"163"},"Update the dependencies array to be: [getQuantityFromIngredient, props, servings, setNewQuantity]",{"range":"164","text":"165"},"Update the dependencies array to be: [endIndex, loaded, props, quantity, startIndex, valueChanged]",{"range":"166","text":"167"},[1503,1547],"[filterResults, props.savedIngredients, props.savedRecipes, searchText]",[1816,1826],"[getQuantityFromIngredient, props, servings, setNewQuantity]",[2449,2459],"[endIndex, loaded, props, quantity, startIndex, valueChanged]"]